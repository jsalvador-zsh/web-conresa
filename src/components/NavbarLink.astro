---
// NavbarLink.astro
interface SubLink {
  href: string;
  label: string;
}

interface Submenu {
  label: string;
  children: SubLink[];
}

interface Props {
  label: string;
  href?: string;
  submenu?: Submenu[]; // Para dropdown
  isMobile?: boolean;
}

const { label, href, submenu = [], isMobile = false } = Astro.props;
---

{!submenu.length ? (
  // Enlace simple
  <a href={href} class={`${isMobile ? 'block px-4 py-2' : 'px-3 py-2 hover:text-white'} text-white hover:underline transition`}>
    {label}
  </a>
) : (
  // Dropdown
  <div class={`group relative ${isMobile ? 'block px-4 py-2' : 'px-3 py-2'}`}>
    <button class={`flex items-center gap-1 ${isMobile ? 'w-full text-left' : 'hover:text-white'} transition`}>
      {label}
      <svg class="w-4 h-4" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/></svg>
    </button>

    <div class={`${isMobile ? 'pl-4 mt-2 space-y-1' : 'absolute left-0 mt-2 w-48 bg-white text-gray-800 rounded shadow-lg hidden group-hover:block z-50'}`}>
      {submenu.map(group => (
        <div class={`${isMobile ? '' : 'border-b border-gray-200 last:border-none'}`}>
          {group.label && !isMobile && (
            <div class="px-4 py-2 font-semibold text-sm bg-gray-100">{group.label}</div>
          )}
          <div class="flex flex-col">
            {group.children.map(link => (
              <a
                href={link.href}
                class={`${isMobile
                  ? 'block px-4 py-2 text-sm hover:bg-gray-200 rounded'
                  : 'block px-4 py-2 hover:bg-[#468E8E] hover:text-white transition'
                }`}
              >
                {link.label}
              </a>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
)}
