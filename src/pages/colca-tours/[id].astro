---
import toursColcaData from "../../data/tours_colca.json";
import Layout from "../../layouts/Layout.astro";
import Time from "../../icons/Time.astro";
import { Image } from "astro:assets";

// Importar imágenes para los tours Colca
import valle1 from "../../images/paquetes-arequipa/valle-colca.jpg";
import valle2 from "../../images/paquetes-arequipa/valle-colca-2.jpg";
import valle3 from "../../images/paquetes-arequipa/valle-colca-3.jpg";
import valle4 from "../../images/paquetes-arequipa/valle-colca-4.jpg";
import valle5 from "../../images/paquetes-arequipa/valle-colca-5.jpeg";
import valle6 from "../../images/paquetes-arequipa/valle-colca-6.jpeg";
import cruzCondor from "../../images/paquetes-arequipa/cruz-condor.jpg";
import chivay from "../../images/paquetes-arequipa/chivay.jpg";
import chivay2 from "../../images/paquetes-arequipa/chivay-2.jpg";
import chivay3 from "../../images/paquetes-arequipa/chivay-3.jpg";

interface Tour {
  id: string;
  title: string;
  schedule: {
    departure: string;
    return: string;
  };
  duration: string;
  modality: string;
  clients: string[];
  itinerary: Array<{
    time: string;
    description: string;
  }>;
  highlights: string[];
}

export async function getStaticPaths() {
  return toursColcaData.tours.map((tour: Tour) => ({
    params: { id: tour.id },
    props: { tour },
  }));
}

const { tour } = Astro.props;

// Mapeo de imágenes para tours Colca
const obtenerImagenesTour = (id: string) => {
  const imagenes: Record<string, any[]> = {
    "colca-1d": [valle1, valle2, cruzCondor, valle3, valle6, chivay, chivay3],
    "colca-2d": [valle3, valle2, cruzCondor, chivay2, valle1, valle5, chivay],
    "colca-3d": [valle3, valle2, cruzCondor, chivay3, valle4, valle5, chivay2],
    // Agrega más tours según sea necesario
  };
  return imagenes[id] || [];
};

// Función segura para obtener la primera imagen
const obtenerImagenPrincipal = (id: string) => {
  const imagenes = obtenerImagenesTour(id);
  return imagenes.length > 0 ? imagenes[0] : null;
};

const imagenes = obtenerImagenesTour(tour.id);

const obtenerToursRelacionados = (idActual: string): Tour[] => {
  return toursColcaData.tours
    .filter(t => t.id !== idActual)
    .sort(() => 0.5 - Math.random())
    .slice(0, 3);
};

const toursRelacionados = obtenerToursRelacionados(tour.id);
---

<Layout title={tour.title} description={tour.title}>
  <div class="">
          <!-- Sección de imagen principal -->
          <div class="relative w-full h-[600px] overflow-hidden mb-8">
            {imagenes.length > 0 ? (
              <Image
                src={imagenes[0]}
                alt={`Imagen principal de ${tour.title}`}
                transition:name={`image-${tour.id}`}
                class="w-full h-full object-cover"
                width={1200}
                height={500}
                format="webp"
                loading="eager"
              />
            ) : (
              <div class="w-full h-full bg-gray-200 flex items-center justify-center">
                <span class="text-gray-500">Sin imagen disponible</span>
              </div>
            )}
            
            <div class="absolute inset-0 bg-black/30 flex items-center justify-center">
              <span class="text-white title-bg text-4xl md:text-5xl font-bold text-center px-4 drop-shadow-lg">
                {tour.title}
              </span>
            </div>
            
            <span class="absolute top-4 right-4 rounded-md bg-[#468E8E] text-pink-100 text-xs italic font-medium px-4 py-2">
              {tour.id}
            </span>
          </div>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

      <!-- Información básica -->
      <div class="flex flex-wrap gap-4 mb-8 justify-end">
        <div class="flex items-center text-[#468E8E] font-medium">
          <Time class="w-5 h-5 mr-2" />
          <span>Duración: {tour.duration}</span>
        </div>
        <div class="flex items-center text-white text-xs px-3 py-1 bg-[#468E8E] rounded-md">
          <span class="italic">{tour.modality}</span>
        </div>
      </div>

      <!-- Contenido principal -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Detalles del tour -->
        <div class="tour-details">
          <h2 class="section-title">Visitas Incluidas:</h2>
          <ul>
            {tour.highlights.map((highlight, index) => (
              <li key={index} class="list-item">{highlight}</li>
            ))}
          </ul>

          {tour.itinerary && (
            <>
              <h2 class="section-title">Itinerario Detallado:</h2>
              {tour.itinerary.map((dia) => (
                <div key={dia.day} class="mb-8">
                  <h3 class="text-xl font-bold text-[#468E8E] mb-4">Día {dia.day}:</h3>
                  <div class="space-y-4">
                    {dia.activities.map((actividad, index) => (
                      <div key={index} class="itinerary-item">
                        <p class="font-bold text-[#468E8E]">
                          {actividad.time} <span class="font-normal text-gray-700">- {actividad.description}</span>
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </>
          )}
        </div>
        
        <!-- Galería de imágenes -->
                <!-- Galería Bento -->
                <div class="gallery-section">
                  {imagenes.length > 1 && (
                      <div class="bento-grid gap-4">
                          <!-- Primera fila: 2 imágenes -->
                          <div class="bento-row-1 grid grid-cols-2 gap-4 mb-4">
                              {imagenes.slice(1, 3).filter(Boolean).map((img, idx) => (
                                  <Image
                                      src={img}
                                      alt={`Imagen ${idx + 2} de ${tour.title}`}
                                      class="w-full h-48 object-cover rounded-lg shadow-md hover:shadow-lg transition-shadow"
                                      width={400}
                                      height={200}
                                      format="webp"
                                      loading="lazy"
                                  />
                              ))}
                          </div>
                          
                          <!-- Segunda fila: 1 imagen grande (si existe) -->
                          {imagenes[3] && (
                              <div class="bento-row-2 mb-4">
                                  <Image
                                      src={imagenes[3]}
                                      alt={`Imagen 4 de ${tour.title}`}
                                      class="w-full h-64 object-cover rounded-lg shadow-md hover:shadow-lg transition-shadow"
                                      width={800}
                                      height={400}
                                      format="webp"
                                      loading="lazy"
                                  />
                              </div>
                          )}
                          
                          <!-- Tercera fila: imágenes restantes -->
                          {imagenes.length > 4 && (
                              <div class="bento-row-3 grid grid-cols-2 gap-4">
                                  {imagenes.slice(4).filter(Boolean).map((img, idx) => (
                                      <Image
                                          src={img}
                                          alt={`Imagen ${idx + 5} de ${tour.title}`}
                                          class="w-full h-48 object-cover rounded-lg shadow-md hover:shadow-lg transition-shadow"
                                          width={400}
                                          height={200}
                                          format="webp"
                                          loading="lazy"
                                      />
                                  ))}
                              </div>
                          )}
                      </div>
                  )}
              </div>
      </div>

      <!-- Tours relacionados -->
      <div class="mt-12">
        <h2 class="text-2xl font-bold text-[#468E8E] mb-6">Tours similares</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {toursRelacionados.map((tourRel) => {
            const imagenPrincipal = obtenerImagenPrincipal(tourRel.id);
            
            return (
              <a 
                href={`/colca-tours/${tourRel.id}`} 
                class="group bg-white shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1 rounded-xl"
              >
                <div class="relative h-48 overflow-hidden">
                  {imagenPrincipal ? (
                    <Image
                      src={imagenPrincipal}
                      alt={`Imagen de ${tourRel.title}`}
                      transition:name={`image-${tourRel.id}`}
                      class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                      width={400}
                      height={200}
                      format="webp"
                      loading="lazy"
                    />
                  ) : (
                    <div class="w-full h-full bg-gray-200 flex items-center justify-center text-gray-500 text-sm">
                      Sin imagen disponible
                    </div>
                  )}
                  <span class="absolute top-3 right-3 bg-[#468E8E] text-pink-100 text-xs italic font-medium px-2 py-1 rounded">
                    {tourRel.modality}
                  </span>
                </div>
                <div class="p-4">
                  <h3 class="text-lg font-bold text-gray-800 mb-2 line-clamp-2">{tourRel.title}</h3>
                  <div class="flex items-center text-[#468E8E] font-medium text-sm">
                    <Time class="w-4 h-4 mr-1" />
                    {tourRel.duration}
                  </div>
                </div>
              </a>
            );
          })}
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Estilos generales */
  .back-link {
    display: inline-block;
    margin-bottom: 2rem;
    color: #468E8E;
    font-weight: 500;
    transition: color 0.2s;
    text-decoration: none;
  }
  
  .back-link:hover {
    text-decoration: underline;
  }
  
  .section-title {
    position: relative;
    font-weight: bold;
    margin-top: 2rem;
    margin-bottom: 1.5rem;
    padding-bottom: 0.5rem;
    color: #468E8E;
    font-size: 1.5rem;
    border-bottom: 1px solid #468E8E;
  }
  
  .list-item {
    position: relative;
    padding-left: 2rem;
    margin-bottom: 0.75rem;
  }
  
  .list-item::before {
    content: "";
    position: absolute;
    left: 0;
    top: 0.35rem;
    width: 1.25rem;
    height: 1.25rem;
    background-image: url('/seashell.png');
    background-size: contain;
    background-repeat: no-repeat;
  }
  
  .itinerary-item {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
    border-left: 2px solid #468E8E;
  }
  
    /* Estilos para la galería bento */
    .bento-grid img {
        transition: all 0.3s ease;
    }
    
    .bento-grid img:hover {
        transform: scale(1.02);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.2);
    }
    
    /* Responsive */
    @media (max-width: 1024px) {
        .paquete-container {
            grid-template-columns: 1fr;
        }
        
        .gallery-section {
            order: -1;
        }
    }
    
    @media (max-width: 768px) {
        .relative.w-full.h-\[600px\] {
            height: 400px;
        }
        
        h1.text-4xl {
            font-size: 2.5rem;
        }
    }
    
    @media (max-width: 640px) {
        .bento-row-1, .bento-row-3 {
            grid-template-columns: 1fr;
        }
        
        .bento-grid img {
            height: 200px !important;
        }
    }
</style>